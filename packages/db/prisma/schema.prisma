// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ContactForm {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Post {
  id          String   @id @default(cuid()) @map("_id") @db.ObjectId
  title       String
  content     String
  featureImage String?
  postUrl     String   @unique
  publishDate DateTime @default(now())
  tags        TagOnPost[]
  excerpt     String?
  authors     AuthorOnPost[]
  featured    Boolean  @default(false)
  metaData    MetaData?
  facebookCard FacebookCard?
  xCard       XCard?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id    String @id @default(cuid()) @map("_id") @db.ObjectId
  name  String
  posts TagOnPost[]
}

model Author {
  id    String @id @default(cuid()) @map("_id") @db.ObjectId
  name  String
  posts AuthorOnPost[]
}

model MetaData {
  id         String  @id @default(cuid()) @map("_id") @db.ObjectId
  postId     String  @unique @db.ObjectId
  post       Post    @relation(fields: [postId], references: [id])
  description String?
  keywords    String[]
  ogImageUrl  String?
}

model FacebookCard {
  id       String  @id @default(cuid()) @map("_id") @db.ObjectId
  postId   String  @unique @db.ObjectId
  post     Post    @relation(fields: [postId], references: [id])
  title    String?
  imageUrl String?
  description String?
}

model XCard {
  id       String  @id @default(cuid()) @map("_id") @db.ObjectId
  postId   String  @unique @db.ObjectId
  post     Post    @relation(fields: [postId], references: [id])
  title    String?
  imageUrl String?
  description String?
}

model TagOnPost {
  id     String @id @default(cuid()) @map("_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String @db.ObjectId
}

model AuthorOnPost {
  id       String @id @default(cuid()) @map("_id") @db.ObjectId
  post     Post   @relation(fields: [postId], references: [id])
  postId   String @db.ObjectId
  author   Author @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}
